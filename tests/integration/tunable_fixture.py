"""Define a tunable_fixture decorator for declarable tunable fixtures."""

from contextlib import contextmanager
from functools import partial, wraps

from typing import Callable, Iterator, ParamSpec, TypeVar

P = ParamSpec("P")
Q = ParamSpec("Q")
T = TypeVar("T")


def tunable_fixture(
    inject: str,
) -> Callable[
    [Callable[Q, Iterator[T]]],
    Callable[Q, Callable[[Callable[P, None]], Callable[P, None]]],
]:
    """Parametrized decorator applied to the definition of the tunable fixture."""

    def _decorator_for_fixture(
        generator: Callable[Q, Iterator[T]],
    ) -> Callable[Q, Callable[[Callable[P, None]], Callable[P, None]]]:
        """The decorator created after the parameter has been saved as closure."""

        # Convert the decorated generator (tunable fixture definition) to a context
        # manager to convert it into a fixture
        context_manager = contextmanager(generator)

        def _generated_decorator_for_test(
            *tf_args: Q.args, **tf_kwargs: Q.kwargs
        ) -> Callable[[Callable[P, None]], Callable[P, None]]:
            """
            Parametrized decorator that will be applied to the test function.

            The args and kwargs are passed to the defined tuable fixture (generator).
            """

            def _decorator(func: Callable[P, None]) -> Callable[P, None]:
                """The decorater generated by the parametrized function in the outer scope."""

                # Create throwaway partial function which removes the injected variable
                # for wrapping the inner function (below)
                # Without this pytest will see the injected parameter and complain of
                # a missing value for it
                new_func = partial(func, **{inject: None})

                @wraps(new_func)
                def _inner(*args: P.args, **kwargs: P.kwargs) -> None:
                    """The replacment for the test function decorated by tunable fixture."""

                    with context_manager(*tf_args, **tf_kwargs) as yielded_value:
                        func(*args, **kwargs, **{inject: yielded_value})

                return _inner

            return _decorator

        return _generated_decorator_for_test

    return _decorator_for_fixture
